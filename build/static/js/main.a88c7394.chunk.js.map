{"version":3,"sources":["App-v2.js","serviceWorker.js","index.js"],"names":["TaskItem","props","taskClass","taskStatus","className","onClick","handleTaskStatus","taskNumber","taskText","removeTask","icon","faTrashAlt","TaskList","this","listTitle","listItems","length","Component","AddTaskForm","submitForm","event","handleSubmit","state","setState","initialState","preventDefault","handleChange","target","name","type","checked","value","bind","blockBtn","formTitle","onSubmit","htmlFor","id","placeholder","onChange","disabled","App","task","tasks","i","slice","filter","index","key","map","renderListItems","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a88c7394.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport './TaskList.css';\nimport './Form.css';\n\nfunction TaskItem(props) {\n\tlet taskClass = \"list-group-item list-group-item-action\";\n\tprops.taskStatus ? taskClass = \"list-group-item list-group-item-action list-group-item-success taskDone\" : taskClass = \"list-group-item list-group-item-action\";\n\n\treturn (\n\t\t<div className=\"taskItemWrap\">\n\t\t\t<button \n\t\t\t\tclassName={taskClass}\n\t\t\t\tonClick={props.handleTaskStatus}\n\t\t\t\t>\n\t\t\t\t\t{props.taskNumber}. {props.taskText}\n\t\t\t</button>\n\t\t\t<button \n\t\t\t\tclassName=\"btn btn-danger taskItemRemove\"\n\t\t\t\tonClick={props.removeTask}\n\t\t\t>\n\t\t\t\t<FontAwesomeIcon icon={faTrashAlt} />\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nclass TaskList extends Component {\n\trender() {\n\t\tconst { listTitle, listItems } = this.props;\n\n\t\treturn (\n\t\t\t<section className=\"col-md-7 col-lg-6\">\n\t\t\t\t<h1 className=\"main-title my-3\">{listTitle}</h1>\n\t\t\t\t<div className=\"list-group\">\n\t\t\t\t\t{!listItems.length ? \n\t\t\t\t\t\t<div className=\"list-group-item text-muted\">No tienes tareas creadas aún.</div> \n\t\t\t\t\t\t: \n\t\t\t\t\t\tlistItems}\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nclass AddTaskForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.initialState = {\n\t\t\ttaskText: '',\n\t\t\ttaskStatus: false,\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.state = this.initialState;\n\t}\n\n\tsubmitForm = (event) => {\n\t\tthis.props.handleSubmit(this.state)\n\t\tthis.setState(this.initialState)\n\t\tevent.preventDefault();\n\t}\n\n\thandleChange = event => {\n\t\tconst { name, type, checked } = event.target\n\t\tconst value = type === \"checkbox\" ? checked : event.target.value;\n\n\t\tthis.setState({\n\t\t\t[name]: value,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst { taskText, taskStatus } = this.state;\n\t\tlet blockBtn = taskText === \"\" ? true : false;\n\n\t\treturn (\n\t\t\t<section className=\"col-md-5 col-lg-4 my-4\">\n\t\t\t\t<div className=\"jumbotron\">\n\t\t\t\t\t<h2 className=\"subtitle\">{this.props.formTitle}</h2>\n\t\t\t\t\t<form onSubmit={this.submitForm}>\n\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t<label className=\"sr-only taskNew\" htmlFor=\"taskName\">Tarea</label>\n\t\t          <input \n\t\t          \ttype=\"text\" \n\t\t          \tclassName=\"form-control\" \n\t\t          \tid=\"taskName\" \n\t\t          \tplaceholder=\"Ingresa el texto de la tarea\" \n\t\t          \tname=\"taskText\" \n\t\t          \tvalue={taskText} \n\t\t          \tonChange={this.handleChange} \n\t\t          />\n\t\t        </div>\n\n\t          <div className=\"form-group form-check\">\n\t            <input \n\t            \ttype=\"checkbox\" \n\t            \tclassName=\"form-check-input\" \n\t            \tid=\"taskDone\"\n\t            \tname=\"taskStatus\" \n\t            \tchecked={taskStatus} \n\t            \tonChange={this.handleChange}\n\t            \t/>\n\t            <label className=\"form-check-label\" htmlFor=\"taskDone\">\n\t              Completada\n\t            </label>\n\t          </div>\n\n\t          <button id=\"submitBtn\" className=\"btn btn-primary taskAdd\" disabled={blockBtn}>Agregar tarea</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleTaskStatus = this.handleTaskStatus.bind(this);\n\t\tthis.state = {\n\t\t\ttasks: [\n\t\t\t\t// {\n\t\t\t\t// \ttaskText: \"Texto de la primera tarea\",\n\t\t\t\t// \ttaskStatus: false,\n\t\t\t\t// },\n\t\t\t\t// {\n\t\t\t\t// \ttaskText: \"Texto de la tarea número dos\",\n\t\t\t\t// \ttaskStatus: true,\n\t\t\t\t// },\n\t\t\t\t// {\n\t\t\t\t// \ttaskText: \"Este es el texto de la tarea número tres, o sea la tercera tarea.\",\n\t\t\t\t// \ttaskStatus: false,\n\t\t\t\t// },\n\t\t\t]\n\t\t}\n\t}\n\n\thandleSubmit = task => {\n\t\tthis.setState({tasks: [...this.state.tasks, task] })\n\t}\n\n\tremoveTask(i) {\n\t\tconst tasks = this.state.tasks.slice();\n\n\t\tthis.setState({\n\t\t\ttasks: tasks.filter((task, index) => {\n\t\t\t\treturn index !== i\n\t\t\t}),\n\t\t})\n\t}\n\n\thandleTaskStatus(i) {\n\t\tconst tasks = this.state.tasks.slice();\n\t\ttasks[i].taskStatus = !tasks[i].taskStatus;\n\t\tthis.setState({tasks: tasks});\n\t}\n\n\trenderListItems(i) {\n\t\treturn (\n\t\t\t<TaskItem \n\t\t\t\tkey={i}\n\t\t\t\ttaskNumber={i+1}\n\t\t\t\ttaskText={this.state.tasks[i].taskText} \n\t\t\t\ttaskStatus={this.state.tasks[i].taskStatus} \n\t\t\t\thandleTaskStatus={() => this.handleTaskStatus(i)} \n\t\t\t\tremoveTask={() => this.removeTask(i)} \n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst tasks = this.state.tasks;\n\t\tconst listItems = tasks.map((task, index) => {\n\t\t\t\treturn (\n\t\t\t\t\tthis.renderListItems(index)\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"container-fluid\">\n\t\t\t\t<div className=\"row justify-content-md-center flex-row-reverse\">\n\t\t\t\t\t<TaskList listTitle=\"Lista de tareas\" listItems={listItems} />\n\t\t\t\t\t<AddTaskForm formTitle=\"Agrega una tarea\" handleSubmit={this.handleSubmit} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App-v2';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// const element = <FontAwesomeIcon icon={faCoffee} />\n\n// ReactDOM.render(element, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}